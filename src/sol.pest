WHITESPACE = _ { " " | "\t" | "\n" }
COMMENT = _{ "//" ~ ANY*}

// -------------------------------------------------------------------------------
// Solidity
// -------------------------------------------------------------------------------
Contract = { "contract" ~ Identifier ~ "{" ~ ContractPart* ~ "}" }

// Block = { "{" ~ (Statement)* ~"}" }
// Statement = {
//     (Block |
//     BreakContinue ) ~ ";"
// }
ContractPart = { StateVariableDeclaration }
StateVariableDeclaration = { TypeName ~ ( "public" | "internal" | "private" | "constant" )* ~ Identifier ~ ("=" ~ Expression)? ~ ";" }
VariableDeclaration = { TypeName ~ Identifier }
Expression = { Identifier }
FunctionCall = { Identifier ~ "(" ~ ( Expression ~ ( "," ~ Expression )* )? ~ ")" }

TypedIdentifierList = { TypeName ~ Identifier ~ ( "," ~ TypeName ~ Identifier )* }

BreakContinue = { "break" | "continue" }

// -------------------------------------------------------------------------------
// Yul
// -------------------------------------------------------------------------------
YulBlock = { "{" ~ YulStatement* ~ "}" }
YulStatement = {
    ( YulBlock |
    YulFunctionDefinition |
    YulVariableDeclaration |
    YulAssignment |
    YulIf |
    YulExpression |
    YulSwitch |
    YulForLoop |
    YulBreakContinue )
}
YulFunctionDefinition = {
    "function " ~ Identifier ~ "(" ~ YulTypedIdentifierList? ~ ")" ~
    ( "->" ~ YulTypedIdentifierList )? ~ YulBlock 
}
YulVariableDeclaration = { 
    "let" ~ YulTypedIdentifierList ~ ( ":=" ~ YulExpression )? 
}
YulExpression = { YulFunctionCall | Identifier | Literal }
YulAssignment = { IdentifierList ~ ":=" ~ YulExpression }
YulIf = { "if" ~ YulExpression ~ YulBlock }
YulSwitch = { "switch" ~ YulExpression ~ ( YulCase+ ~ YulDefault? | YulDefault ) }
YulCase = { "case" ~ Literal ~ YulBlock }
YulDefault = { "default" ~ YulBlock }
YulForLoop = { "for" ~ YulBlock ~ YulExpression ~ YulBlock ~ YulBlock }
YulBreakContinue = { "break" | "continue" }
YulFunctionCall = { Identifier ~ "(" ~ ( YulExpression ~ ( "," ~ YulExpression )* )? ~ ")" }

YulTypedIdentifierList = { Identifier ~ ":" ~ TypeName ~ ( "," ~ Identifier ~ ":" ~ TypeName )* }

// -------------------------------------------------------------------------------
// Shared
// -------------------------------------------------------------------------------
TypeName = { Identifier | BuiltinTypeName }
BuiltinTypeName = { "bool" | ( "u" | "s" ) ~ ( "8" | "32" | "64" | "128" | "256" ) }

Identifier = { !Digit ~ (Alpha | Digit)+ }
IdentifierList = { Identifier ~ ( "," ~ Identifier)* }

Literal = { ( NumberLiteral | TrueLiteral | FalseLiteral ) ~  ( ":" ~ TypeName )? }
NumberLiteral = { DecimalNumber | HexNumber }
TrueLiteral = { "true" }
FalseLiteral = { "false" }

DecimalNumber = { (ASCII_DIGIT)+ }
HexNumber = { "0x" ~ (ASCII_HEX_DIGIT)+ }

Digit = { ASCII_DIGIT }
Alpha = { ASCII_ALPHA | "_" }